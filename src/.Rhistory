setwd("~/Desktop/Lab/clustering/src")
df = data.frame(as.matrix(DRUID::cmap_druid$tfidf))
set.seed(20)
kmeansCluster <- function(numClusters, save=TRUE) {
clusters <- kmeans(df, numClusters)
str(clusters)
df$drugClass <- as.factor(clusters$cluster)
labels <- data.frame(cbind(row.names(df),df$drugClass))
print(labels)
if(save) {
filename = paste('drug_labels_', numClusters, '_clusters_non_size_norm', sep="")
write.csv(labels, file = filename)
}
}
# non-size normalized
numClusters = 5
kmeansCluster(numClusters)
set.seed(20)
kmeansCluster <- function(numClusters, save=TRUE) {
clusters <- kmeans(df, numClusters)
str(clusters)
df$drugClass <- as.factor(clusters$cluster)
labels <- data.frame(cbind(row.names(df),df$drugClass))
print(labels)
if(save) {
path = '/Users/jackie16201/Desktop/Lab/clustering/data/'
filename = paste(path, 'drug_labels_', numClusters, '_clusters_non_size_norm', sep="")
write.csv(labels, file = filename)
}
}
# non-size normalized
numClusters = 5
kmeansCluster(numClusters)
numClusters = 10
kmeansCluster(numClusters)
numClusters = 50
kmeansCluster(numClusters)
numClusters = 100
kmeansCluster(numClusters)
numClusters = 300
kmeansCluster(numClusters)
test_path = '/Users/jackie16201/Desktop/Lab/clustering/data/'
test_set <- read.csv(file=paste(test_path, 'test_drugs'), header=FALSE, sep=",")
test_set <- read.csv(file=paste(test_path, 'test_drugs', sep=''), header=FALSE, sep=",")
print(test_set)
# test crossproduct argument
example_druid <- concoct(dge_matrix = query_matrix, tfidf_matrix = DRUID::cmap_druid$tfidf, tfidf_crossproduct = "", num_random = 10000, druid_direction = "neg", fold_thr = 0, pvalue_thr = 0.05, entrez = gset)
devtools::install_github("diogocamacho/druid")
library(DRUID)
# diogo installation example
gset <- unique(gsub(" down", "", gsub(" up", "", sample(colnames(DRUID::cmap_druid$tfidf), 100))))
query_matrix <- matrix(1, ncol = 2, nrow = length(gset))
query_matrix[, 2] <- 0
query_matrix[sample(x = seq(1, length(gset)), size = 0.25 * length(gset)), 1] <- -1
# test crossproduct argument
example_druid <- concoct(dge_matrix = query_matrix, tfidf_matrix = DRUID::cmap_druid$tfidf, tfidf_crossproduct = "", num_random = 10000, druid_direction = "neg", fold_thr = 0, pvalue_thr = 0.05, entrez = gset)
# test crossproduct argument
example_druid <- concoct(dge_matrix = query_matrix, tfidf_matrix = DRUID::cmap_druid$tfidf, tfidf_crossproduct = [], num_random = 10000, druid_direction = "neg", fold_thr = 0, pvalue_thr = 0.05, entrez = gset)
# test crossproduct argument
example_druid <- concoct(dge_matrix = query_matrix, tfidf_matrix = DRUID::cmap_druid$tfidf, tfidf_crossproduct = {}, num_random = 10000, druid_direction = "neg", fold_thr = 0, pvalue_thr = 0.05, entrez = gset)
# test crossproduct argument
example_crossproduct = DRUID::cmap_druid$cpm
empty_cross_test <- vector(mode="numeric", length=0)
example_druid <- concoct(dge_matrix = query_matrix, tfidf_matrix = DRUID::cmap_druid$tfidf, tfidf_crossproduct = empty_cross_test, num_random = 10000, druid_direction = "neg", fold_thr = 0, pvalue_thr = 0.05, entrez = gset)
# test crossproduct argument with empty string
example_druid <- concoct(dge_matrix = query_matrix, tfidf_matrix = DRUID::cmap_druid$tfidf, tfidf_crossproduct = "", num_random = 10000, druid_direction = "neg", fold_thr = 0, pvalue_thr = 0.05, entrez = gset)
# test crossproduct argument with empty vector
empty_cross_test <- vector(mode="numeric", length=0)
example_druid <- concoct(dge_matrix = query_matrix, tfidf_matrix = DRUID::cmap_druid$tfidf, tfidf_crossproduct = empty_cross_test, num_random = 10000, druid_direction = "neg", fold_thr = 0, pvalue_thr = 0.05, entrez = gset)
